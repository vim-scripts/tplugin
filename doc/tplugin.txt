*tplugin.txt*       A simple plugin loader/runtimepath manager
                    Author: Tom Link, micathom at gmail com

With the distribution of vim plugins as git repositories, the usual 
directory layout has become somewhat disadvantagous. This script 
provides a way to load those plugins in an efficient manner.

tplugin also provides an autoload mechanism for commands and functions 
similar to the AsNeeded plugin. See below for details.

The main purpose of this plugin was to facilitate the use of plugins 
that are downloaded from a VCS like git, svn etc. But it can also be 
used to handle plugins distributed as zip or tgz archives. For vimballs, 
you'll might have to use a non-standard vimball unpacker---like the one 
that can be found in the vimtlib repository.

tplugin assumes that your local copies follow a certain directory 
layout:

    ROOT/
      repo1/
        after/
        autoload/
        doc/
        plugin/
      repo2/
        after/
        autoload/
        doc/
        plugin/
      ...

You can have more than one root directory although it currently (as of 
version 0.2) could cause problems and is deprecated. 


Usage~
                                                    *tplugin-autoload*
With autoload:

    By default, tplugin has autoload enabled. With autoload, you can use 
    tplugin by (1) loading the macro in your |vimrc| file and then (2) 
    (optional step) setting non-standard root directories. The standard 
    root-directory is ~/vimfiles/repos (or ~/.vim/repos) and does not 
    have to be explicitely declared.

    Example: >
        
        runtime macros/tplugin.vim
        " Only necessary if you use a non-standard root directory
        TPluginRoot /home/x/src/repos

<   (3) Collect the autoload information by running the |:TPluginScan| 
    command. (4) Restart vim.

    The plugins will be loaded as soon as one of its functions or 
    commands is called for the first time.

Without autoload:

    (1) Load the macro and (2) set non-standard root directories. In 
    addition, (3) load plugins as desired.

    Example: >

        runtime macros/tplugin.vim
        " Only necessary if you use a non-standard root directory
        TPluginRoot /home/x/src/repos
        " Load all plugins in repo1
        TPlugin repo1
        " Load only specified plugins from repo2
        TPlugin repo2 foo bar

<   It is advantageous to source the macro rather at the top of your 
    vimrc file before making any changes to the 'runtimepath'. If you 
    don't change the 'runtimepath', the position is of no importance.

    Full example as it could be found in a |vimrc| file: >

        runtime macros/tplugin.vim
        TPluginRoot F:\repos
        TPlugin vim-surround
        let g:snippets_dir = 'X:\vimfiles\snippets,F:\repos\snipmate.vim\snippets'
        TPlugin snipmate.vim
        TPlugin! vimtlib 02tlib

CAVEAT: If you have a file after/plugin/foo.vim in you user vimfiles 
directory, this file will be loaded before any "managed" plugin "foo". 
You thus have to check in your after/plugin/foo.vim file if the plugin 
was already loaded.

Contrary to the default plugin behaviour, those managed plugins are 
loaded when the |VimEnter| event is triggered, i.e. after all plugins 
(incl. the after directory) and |gvimrc| was loaded. This approach 
provides for a better control of which plugins should be loaded. You can 
load a managed plugin immediately by adding a bang '!' to the |:TPlugin| 
command.

                                                    *tplugin-asneeded*
AsNeeded Users~

You could make use of tplugin's autoloading mechanism and move the files 
in the AsNeeded subdirectory to REPOS/_asneeded/plugin/. |:TPluginScan| 
would then create dummy definitions for commands and functions. Maps are 
not supported by tplugin (contrary to the AsNeeded plugin).


Related work~

    - Marc Weber's vim-addon-manager (my main source of inspiration for 
      this script), which also provides downloading plugins and 
      automatic dependency management:
      http://github.com/MarcWeber/vim-plugin-manager (vimscript #2905)

    - Tim Pope's pathogen (vimscript #2332).

    - Charles E. Campbell's AsNeeded (vimscript #915)


-----------------------------------------------------------------------
Install~

Edit the vba file and type: >

    :so %

See :help vimball for details. If you have difficulties or use vim 7.0, 
please make sure, you have the current version of vimball
(vimscript #1502) installed or update your runtime.

Also available via git: http://github.com/tomtom/vimtlib/


========================================================================
Contents~

        g:tplugin_autoload ......... |g:tplugin_autoload|
        :TPlugin ................... |:TPlugin|
        :TPluginRoot ............... |:TPluginRoot|
        :TPluginBefore ............. |:TPluginBefore|
        :TPluginAfter .............. |:TPluginAfter|
        :TPluginFunction ........... |:TPluginFunction|
        :TPluginCommand ............ |:TPluginCommand|
        :TPluginScan ............... |:TPluginScan|
        g:tplugin_helptags ......... |g:tplugin_helptags|
        g:tplugin_menu_prefix ...... |g:tplugin_menu_prefix|
        g:tplugin_scan ............. |g:tplugin_scan|
        tplugin#RegisterFunction ... |tplugin#RegisterFunction()|
        tplugin#Autoload ........... |tplugin#Autoload()|
        tplugin#Help ............... |tplugin#Help()|
        tplugin#Filetype ........... |tplugin#Filetype()|
        tplugin#Map ................ |tplugin#Map()|
        tplugin#Remap .............. |tplugin#Remap()|
        tplugin#Scan ............... |tplugin#Scan()|
        tplugin#Menu ............... |tplugin#Menu()|


========================================================================
macros/tplugin.vim~

                                                    *g:tplugin_autoload*
g:tplugin_autoload             (default: 1)
    Enable autoloading. See |:TPluginScan|, |:TPluginCommand|, and 
    |:TPluginFunction|.

                                                    *:TPlugin*
:TPlugin[!] REPOSITORY [PLUGINS ...]
    Register certain plugins for being sourced at |VimEnter| time.
    See |tplugin.txt| for details.
    
    With the optional '!', the plugin will be loaded immediately.
    In interactive use, i.e. once vim was loaded, plugins will be loaded 
    immediately anyway.
    
    IF REPOSITORY contains a slash or a backslash, it is considered the 
    path relative from the current root directory to the plugin directory. 
    This allows you to deal with repositories with a non-standard 
    directory layout. Otherwise it is assumed that the source files are 
    located in the "plugin" subdirectory.

                                                    *:TPluginRoot*
:TPluginRoot DIRECTORY
    Define the root directory for the following |:TPlugin| commands.
    Read autoload information if available (see |g:tplugin_autoload| and 
    |:TPluginScan|).

                                                    *:TPluginBefore*
:TPluginBefore FILE_RX [FILE_PATTERNS ...]
    Load DEPENDENCIES before loading a file matching the regexp pattern 
    FILE_RX.
    
    The files matching FILE_PATTERNS are loaded after the repo's path is 
    added to the 'runtimepath'. You can thus use partial filenames as you 
    would use for the |:runtime| command.
    
    This command should be best put into ROOT/tplugin_REPO.vim files, 
    which are loaded when enabling a source repository.
    
    Example: >
      " Load master.vim before loading any plugin in a repo
      TPluginBefore plugin/*.vim plugin/master.vim
<

                                                    *:TPluginAfter*
:TPluginAfter FILE_RX [OTHER_PLUGINS ...]
    Load OTHER_PLUGINS after loading a file matching the regexp pattern 
    FILE_RX.
    See also |:TPluginBefore|.
    
    Example: >
      " Load auxiliary plugins after loading master.vim
      TPluginAfter plugin/master.vim plugin/sub_*.vim
<

                                                    *:TPluginFunction*
:TPluginFunction FUNCTION REPOSITORY [PLUGIN]
    Load a certain plugin on demand (aka autoload) when FUNCTION is called 
    for the first time.

                                                    *:TPluginCommand*
:TPluginCommand COMMAND REPOSITORY [PLUGIN]
    Load a certain plugin on demand (aka autoload) when COMMAND is called 
    for the first time. Then call the original command.
    
    For most plugins, |:TPluginScan| will generate the appropriate 
    TPluginCommand commands for you. For some plugins, you'll have to 
    define autocommands yourself in the |vimrc| file.
    
    Example: >
      TPluginCommand TSelectBuffer vimtlib tselectbuffer
<

                                                    *:TPluginScan*
:TPluginScan[!] [WHAT] [ROOT]
    Scan the current root directory for commands and functions. Save 
    autoload information in "ROOT/tplugin.vim".
    
    Where WHAT is a combination of the following identifiers:
    
       c ... commands
       f ... functions
       p ... <plug> maps
       a ... autoload
       t ... filetypes
       h ... helptags (see also |g:tplugin_helptags|)
       all ... all of the above
    
    WHAT defaults to |g:tplugin_scan|.
    
    With the optional '!', the autocommands are immediatly usable.
    
    Other than the AsNeeded plugin, tplugin doesn't support the creation 
    of autoload information for maps.
    
    If you collect repositories in one than more directory, I'd suggest to 
    create a special script.
    
    Example: >
      TPluginRoot dir1
      TPluginScan
      TPluginRoot dir2
      TPluginScan
<


========================================================================
autoload/tplugin.vim~

                                                    *g:tplugin_helptags*
g:tplugin_helptags             (default: 1)
    If non-nil, optionally generate helptags for the repository's doc 
    subdirectory.

                                                    *g:tplugin_menu_prefix*
g:tplugin_menu_prefix          (default: '')
    If autoload is enabled and this variable is non-empty, build a 
    menu with available plugins.
    Menus are disabled by default because they are less useful 
    than one might think with autoload enabled.
    A good choice for this variable would be, e.g., 
    'Plugin.T&Plugin.'.
    NOTE: You have to re-run |:TPluginScan| after setting this 
    value.

                                                    *g:tplugin_scan*
g:tplugin_scan                 (default: 'cfapt')
    The default value for |:TPluginScan|.

                                                    *tplugin#RegisterFunction()*
tplugin#RegisterFunction(def)

                                                    *tplugin#Autoload()*
tplugin#Autoload(type, def, bang, range, args)
    args: A string it type == 1, a list if type == 2

                                                    *tplugin#Help()*
tplugin#Help(tags)

                                                    *tplugin#Filetype()*
tplugin#Filetype(filetype, repos)

                                                    *tplugin#Map()*
tplugin#Map(root, def)

                                                    *tplugin#Remap()*
tplugin#Remap(keys, m, def)

                                                    *tplugin#Scan()*
tplugin#Scan(immediate, roots, args)
    Write autoload information for all known root directories to 
    "ROOT/tplugin.vim".

                                                    *tplugin#Menu()*
tplugin#Menu(item, cmd)



vim:tw=78:fo=tcq2:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
